/////////////////===== Reduce Gold Amounts =====\\\\\\\\\\\\\\\\\

////Remove Gold from All Creatures
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
	SET gold_offset = 0x1c
	READ_LONG gold_offset gd //Gold
	PATCH_IF gd > 0	BEGIN
		PATCH_IF gold_divide_amount == 0 BEGIN
			WRITE_LONG gold_offset 0
		END ELSE BEGIN
			WRITE_LONG gold_offset (gd / gold_divide_amount)
		END
	END
	
	//Some creatures have gold (MISC07) in their inventory, so we need to update it
	//We can't use ADD_CRE_ITEM here since we don't know if a creature actually has gold or not
	//GET_OFFSET_ARRAY also doesn't seem to actually work
	READ_LONG 0x02c0 items //total items
	READ_LONG 0x02bc item_offset //offset to items

	SET items_size = 20 //total size of an item entry
	FOR (curr=0; curr < items; curr += 1) BEGIN
		SET curr_item_offset = item_offset + (items_size * curr)
		READ_ASCII (curr_item_offset + 0x00) item_name
		READ_SHORT (curr_item_offset + 0x0a) item_quantity
		READ_SHORT (curr_item_offset + 0x0c) item_quantity2 //???
		PATCH_IF ~%item_name%~ STRING_EQUAL ~MISC07~ AND item_quantity > 0 BEGIN
			PATCH_IF gold_divide_amount == 0 BEGIN
				SET newgold = 0
			END ELSE BEGIN
				SET newgold = item_quantity / gold_divide_amount
				SET newgold2 = item_quantity2 / gold_divide_amount
			END
			//PATCH_PRINT ~reducing gold for %SOURCE_FILE% from %item_quantity% to %newgold%~
			
			//We can't have gold with quantity 0 in our inventory, it assumes 1
			//So just remove the item entirely
			PATCH_IF newgold == 0 BEGIN
				REMOVE_CRE_ITEM ~MISC07~
			END ELSE BEGIN
				WRITE_SHORT (curr_item_offset + 0x0a) newgold
				WRITE_SHORT (curr_item_offset + 0x0c) newgold2
			END
		END
	END	
BUT_ONLY

////Remove Gold from All Containers
//COPY_EXISTING ~AR3300.are~ ~override~
COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
	READ_LONG 0x78 items_offset
	SET items_size = 20
	
	//Get Containers
	GET_OFFSET_ARRAY container_array ARE_V10_CONTAINERS
	PHP_EACH container_array AS int => container_offset
	BEGIN
		SET items_count_offset = container_offset + 0x44
		SET first_item_index = container_offset + 0x40
		SET container_type_offset = container_offset + 0x24
		SET container_flags_offset = container_offset + 0x28
		
		READ_ASCII container_offset container_name
		READ_LONG items_count_offset item_count
		READ_LONG first_item_index index
		READ_SHORT container_type_offset container_type
		READ_LONG container_flags_offset container_flags
		SET locked = (container_flags & BIT0) OR (container_flags & BIT2)
		
		PATCH_IF (!locked)
		BEGIN
			//PATCH_PRINT ~%container_name% of type %container_type% has %item_count% items starting at %index% and lock state is %locked%~
			FOR (item = index; item < (index + item_count); item += 1)
			BEGIN
				SET item_offset = items_offset + (items_size * index)
				READ_ASCII (item_offset + 0x00) item_name
				READ_SHORT (item_offset + 0x0a) item_quantity
				//PATCH_PRINT ~%item_quantity%: %item_name%~
				PATCH_IF ~%item_name%~ STRING_EQUAL ~MISC07~ AND item_quantity > 0
				BEGIN
					//PATCH_PRINT ~updating gold value...~
					PATCH_IF gold_divide_amount == 0 BEGIN
						WRITE_SHORT (item_offset + 0x0a) 0
					END ELSE BEGIN
						WRITE_SHORT (item_offset + 0x0a) (item_quantity / gold_divide_amount)
					END
				END
			END
		END
	END
BUT_ONLY

//Reduce all the standard drops by the required amount
//This is HORRIBLE code!
COPY_EXISTING ~rndtreas.2da~ ~override~
	COUNT_2DA_ROWS 20 total_rows
	FOR (row=0; row < total_rows; row += 1)
		BEGIN
			FOR (col=0; col < 20; col += 1)
				BEGIN
					READ_2DA_ENTRY row 0 20 name
					READ_2DA_ENTRY row col 20 val
					PATCH_IF (~%name%~ STRING_EQUAL "POOR")
						OR (~%name%~ STRING_EQUAL "AVERAGE")
						OR (~%name%~ STRING_EQUAL "WELL_OFF")
						OR (~%name%~ STRING_EQUAL "WEALTHY")
						OR (~%name%~ STRING_EQUAL "RICH")
						BEGIN
							FOR (num = 0; num < 999; num += 1)
								BEGIN
									PATCH_IF num < 10
										BEGIN
											SPRINT prefix ~00~
										END
									PATCH_IF num >= 10 AND num < 100
										BEGIN
											SPRINT prefix ~0~
										END
									PATCH_IF num >= 100
										BEGIN
											SPRINT prefix ~~
										END
									PATCH_IF ~%val%~ STRING_EQUAL ~%prefix%%num%~
										BEGIN
											PATCH_IF gold_divide_amount == 0 BEGIN
												SET newgold = 0
											END ELSE BEGIN
												SET newgold = num * gold_divide_amount
											END
											SET_2DA_ENTRY row col 20 ~%prefix%%newgold%~
										END
								END
						END
				END
		END
BUT_ONLY